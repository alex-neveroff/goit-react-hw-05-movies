{"version":3,"file":"static/js/157.dfb8e255.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","sevices/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieDetailsCard = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-bottom: 30px;\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 15px;\n\n  .card-poster {\n    max-height: 750px;\n    height: 100%;\n    border-radius: 8px;\n  }\n\n  .card-wrap {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n\n  .card-text {\n    font-size: 20px;\n  }\n\n  .card-title {\n    font-size: 30px;\n    text-align: center;\n    text-transform: uppercase;\n  }\n  .card-subtitle {\n    font-size: 24px;\n  }\n`;\n\nexport const CastReviewsCard = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-bottom: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CastReviewsCard, MovieDetailsCard } from './MovieCard.styled';\nimport { NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieCard = ({ movie }) => {\n  const location = useLocation();\n  const backLink = location.state?.from;\n  const {\n    title,\n    poster_path,\n    release_date,\n    genres,\n    overview,\n    tagline,\n    vote_average,\n    production_countries,\n  } = movie;\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://raw.githubusercontent.com/alex-neveroff/templates/main/images/slider/unknown.jpg';\n\n  const movieGenres = genres.map(genre => genre.name).join(', ');\n  const movieCountries = production_countries\n    .map(country => country.name)\n    .join(', ');\n  const votePercentage = (vote_average * 10).toFixed() + '%';\n\n  return (\n    <>\n      <MovieDetailsCard>\n        <img\n          className=\"card-poster\"\n          src={poster}\n          alt={title}\n          width=\"300\"\n          height=\"450\"\n        />\n        <div className=\"card-wrap\">\n          <h2 className=\"card-title\">{title}</h2>\n          {tagline && (\n            <>\n              <h3 className=\"card-subtitle\">Tagline</h3>\n              <p className=\"card-text\">{tagline}</p>\n            </>\n          )}\n          {overview && (\n            <>\n              <h3 className=\"card-subtitle\">Overview</h3>\n              <p className=\"card-text\">{overview}</p>\n            </>\n          )}\n          {(release_date ||\n            votePercentage ||\n            genres.length > 0 ||\n            production_countries.length > 0) && (\n            <>\n              <h3 className=\"card-subtitle\">Description</h3>\n              {release_date && (\n                <p className=\"card-text\">\n                  <b>Release date:</b> {release_date}\n                </p>\n              )}\n              {genres.length > 0 && (\n                <p className=\"card-text\">\n                  <b>Genres:</b> {movieGenres}\n                </p>\n              )}\n              {production_countries.length > 0 && (\n                <p className=\"card-text\">\n                  <b>Country:</b> {movieCountries}\n                </p>\n              )}\n              {votePercentage && (\n                <p className=\"card-text\">\n                  <b>User score:</b> {votePercentage}\n                </p>\n              )}\n            </>\n          )}\n        </div>\n      </MovieDetailsCard>\n      <CastReviewsCard>\n        <NavLink className=\"menu back-menu\" to={backLink ?? '/'}>\n          Back\n        </NavLink>\n        <NavLink className=\"menu\" to=\"cast\" state={{ from: backLink }}>\n          Cast\n        </NavLink>\n        <NavLink className=\"menu\" to=\"reviews\" state={{ from: backLink }}>\n          Reviews\n        </NavLink>\n      </CastReviewsCard>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\nexport default MovieCard;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Notify } from 'notiflix';\nimport getMovies from 'sevices/api';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getMovieDetails = async () => {\n      try {\n        setLoading(true);\n        const results = await getMovies(`movie/${movieId}`);\n        setMovie(results);\n      } catch (error) {\n        setError(error.message);\n        Notify.failure(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {Boolean(error !== null) && <p>Error: {error}</p>}\n      {movie && <MovieCard movie={movie} />}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '65175319ff5fdf769ef44bf4c6a21d27';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst getMovies = async (pathname, page = 1, query = '') => {\n  const options = {\n    path: pathname,\n    page: page,\n    query: query,\n  };\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/${options.path}?api_key=${API_KEY}&query=${options.query}&page=${options.page}`\n    );\n    console.log(data);\n    return data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport default getMovies;\n"],"names":["MovieDetailsCard","styled","_templateObject","_taggedTemplateLiteral","CastReviewsCard","_templateObject2","_ref","_location$state","movie","backLink","useLocation","state","from","title","poster_path","release_date","genres","overview","tagline","vote_average","production_countries","poster","concat","movieGenres","map","genre","name","join","movieCountries","country","votePercentage","toFixed","_jsxs","_Fragment","children","_jsx","className","src","alt","width","height","length","NavLink","to","Suspense","fallback","Loader","Outlet","movieId","useParams","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","useEffect","getMovieDetails","_asyncToGenerator","_regeneratorRuntime","mark","_callee","results","wrap","_context","prev","next","getMovies","sent","t0","message","Notify","finish","stop","apply","arguments","Boolean","MovieCard","pathname","options","_yield$axios$get","data","_args","path","page","undefined","query","axios","console","log","abrupt","_x"],"sourceRoot":""}