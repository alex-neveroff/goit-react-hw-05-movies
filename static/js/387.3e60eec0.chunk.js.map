{"version":3,"file":"static/js/387.3e60eec0.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","sevices/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledReviews = styled.div`\n  .title {\n    font-size: 30px;\n    text-align: center;\n    margin-bottom: 40px;\n    text-transform: uppercase;\n  }\n\n  .reviews-list {\n    display: flex;\n    flex-direction: column;\n    gap: 50px;\n  }\n\n  .review-item {\n    display: flex;\n    gap: 50px;\n    box-shadow: 1px 4px 6px rgba(0, 0, 0, 0.16);\n    padding: 15px;\n    background-color: #fff;\n    border-radius: 8px;\n  }\n\n  .author-wrap {\n    width: 150px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n  }\n  .author-name {\n    font-size: 18px;\n    font-weight: bold;\n    text-align: center;\n  }\n\n  .author-text {\n    font-size: 20px;\n    width: 1000px;\n  }\n  .no-text {\n    font-size: 24px;\n  }\n`;\n","import { Notify } from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport getMovies from 'sevices/api';\nimport { StyledReviews } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getCastDetails = async () => {\n      try {\n        setLoading(true);\n        const { results } = await getMovies(`/movie/${movieId}/reviews`);\n        setReviews(results);\n      } catch (error) {\n        setError(error.message);\n        Notify.failure(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCastDetails();\n  }, [movieId]);\n\n  return (\n    <StyledReviews>\n      <h2 className=\"title\">Movie reviews</h2>\n      {loading && <Loader />}\n      {Boolean(error !== null) && <p>Error: {error}</p>}\n      {reviews.length > 0 && (\n        <ul className=\"reviews-list\">\n          {reviews.map(review => {\n            const authorphoto = review.author_details.avatar_path;\n            const avatar = authorphoto\n              ? authorphoto.includes('http')\n                ? `${authorphoto.slice(1)}`\n                : `https://www.themoviedb.org/t/p/w150_and_h150_face${authorphoto}`\n              : 'https://raw.githubusercontent.com/alex-neveroff/templates/main/images/slider/unknown.jpg';\n\n            return (\n              <li className=\"review-item\" key={review.id}>\n                <div className=\"author-wrap\">\n                  <img\n                    className=\"author-photo\"\n                    src={avatar}\n                    alt={review.author}\n                    width=\"80\"\n                    height=\"80\"\n                  />\n                  <p className=\"author-name\">{review.author}</p>\n                </div>\n                <p className=\"author-text\">{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}{' '}\n      {reviews.length === 0 && !loading && (\n        <p className=\"no-text\">There are no reviews for this movie yet.</p>\n      )}\n    </StyledReviews>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '65175319ff5fdf769ef44bf4c6a21d27';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst getMovies = async (pathname, page = 1, query = '') => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/${pathname}?api_key=${API_KEY}&query=${query}&page=${page}`\n    );\n    return data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport default getMovies;\n"],"names":["StyledReviews","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","movieId","useParams","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","useEffect","getCastDetails","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getMovies","results","wrap","_context","prev","next","getMovies","concat","sent","t0","message","Notify","finish","stop","apply","arguments","_jsxs","children","_jsx","className","Loader","Boolean","length","map","review","authorphoto","author_details","avatar_path","avatar","includes","slice","src","alt","author","width","height","content","id","pathname","page","query","_yield$axios$get","data","_args","undefined","axios","abrupt","_x"],"sourceRoot":""}